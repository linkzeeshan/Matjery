@using Nop.Web.Areas.Admin.Models.Messages
@model QueuedPushNotificationSearchModel

@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    //page title
    ViewBag.Title = T("Admin.System.QueuedPushNotification").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Queued PN");
}

@Html.AntiForgeryToken()
<div class="content-header clearfix">
    <h1 class="pull-left">
        @T("Admin.System.QueuedPushNotification")
    </h1>
    <div class="pull-right">
        <button type="button" id="delete-selected" class="btn bg-red">
            <i class="fa fa-trash-o"></i>
            @T("Admin.System.QueuedPushNotification.DeleteSelected")
        </button>
        <button type="submit" id="delete-all" name="delete-all" class="btn bg-red">
            <i class="fa fa-trash-o"></i>
            @T("Admin.System.QueuedPushNotification.DeleteAll")
        </button>
        <nop-delete-confirmation asp-model-id="" asp-button-id="delete-all" />
    </div>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-4">
                                    <nop-label asp-for="@Model.SearchMaxSentTries" />
                                </div>
                                <div class="col-md-8">
                                    <nop-editor asp-for="@Model.SearchMaxSentTries" />
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-8 col-md-offset-4">
                                    <button type="button" id="search-queuedsms" class="btn btn-primary btn-search">
                                        <i class="fa fa-search"></i>
                                        @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    @await Html.PartialAsync("Table", new DataTablesModel
                   {
                       Name = "QueuedpushNotificationTemplates-grid",
                       UrlRead = new DataUrl("List", "QueuedPushNotification", null),
                       SearchButtonId = "search-pushNotificationTemplate",
                       Length = Model.PageSize,
                       LengthMenu = Model.AvailablePageSizes,
                       Filters = new List<FilterParameter>
                               {
                           new FilterParameter(nameof(Model.SearchMaxSentTries))
                       },
                       ColumnCollection = new List<ColumnProperty>
                       {
                           new ColumnProperty(nameof(QueuedPushNotificationModel.Id))
    {
    IsMasterCheckBox = true,
    Render = new RenderCheckBox("checkbox_products"),
    ClassName =  NopColumnClassDefaults.CenterAll,
    Width = "50"
    },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.Id))
                           {
                               Title = T("Admin.System.QueuedPushNotification.Fields.Id").Text,
                           },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.Title))
                           {
                               Title = T("Admin.System.QueuedPushNotification.Fields.Title").Text
                           },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.Message))
                            {
                                Title = T("Admin.System.QueuedPushNotification.Fields.Message").Text,
                                Width = "300"
                            },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.CreatedOn))
                            {
                                Title = T("Admin.System.QueuedPushNotification.Fields.CreatedOn").Text,
                                Width = "200"
                            },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.SentTries))
                            {
                                Title = T("Admin.System.QueuedPushNotification.Fields.SentTries").Text,
                                Width = "200"
                            },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.SentOn))
                            {
                                Title = T("Admin.System.QueuedPushNotification.Fields.SentOn").Text,
                                Width = "300"
                            },
                            new ColumnProperty(nameof(QueuedPushNotificationModel.PriorityName))
                            {
                                Title = T("Admin.System.QueuedPushNotification.Fields.Priority").Text,
                                Width = "150"
                            },
                           new ColumnProperty(nameof(QueuedPushNotificationModel.Id))
                           {
                               Title = T("Admin.Common.Edit").Text,
                               Width = "100",
                               ClassName =  NopColumnClassDefaults.Button,
                               Render = new RenderButtonEdit(new DataUrl("Edit"))
                           }
                       }
                   })
                    <script>
                        var selectedIds = [];
                        $(document).ready(function () {
                            selectedIds = [];

                              //"delete selected" button
                                $('#delete-selected').click(function(e) {
                                    e.preventDefault();
                                    $('table > tbody > tr').each(function () {
                                        var td = $(this).find("td:eq(1)");
                                        var trId = "tr" + td.text();
                                        var id = $(this).attr("id", trId);
                                        // $(this).parent().parent().attr(ProductId.toString(), id);
                                    });

                                    var postData = {
                                        selectedIds: selectedIds
                                    };
                                    addAntiForgeryToken(postData);

                                    $.ajax({
                                        cache: false,
                                        type: "POST",
                                        url: "@(Url.Action("DeleteSelected", "QueuedPushNotification"))",
                                        data: postData,
                                        complete: function(data) {
                                            //reload grid
                                           // var grid = $('#queuedSms-grid').data('kendoGrid');
                                           // grid.dataSource.page(1); //new search. Set page size to 1
                                            //grid.dataSource.read(); we already loaded the grid above using "page" function
                                            //clear selected checkboxes
                                            $('.checkboxGroups').attr('checked', false).change();
                                            for (var selectval in selectedIds) {
                                                $('table > tbody > tr#tr' + selectedIds[selectval]).remove();
                                            }
                                            selectedIds = [];
                                        },
                                        error: function(xhr, ajaxOptions, thrownError) {
                                            alert(thrownError);
                                        },
                                        traditional: true
                                    });
                                    return false;
                                });
                            //Delete All
                            //wire up checkboxes.
                            $('#queuedSms-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                                var $check = $(this);
                                if ($check.is(":checked") == true) {
                                    var checked = jQuery.inArray($check.val(), selectedIds);
                                    if (checked == -1) {
                                        //add id to selectedIds.
                                        selectedIds.push($check.val());
                                    }
                                } else {
                                    var checked = jQuery.inArray($check.val(), selectedIds);
                                    if (checked > -1) {
                                        //remove id from selectedIds.
                                        selectedIds = $.grep(selectedIds, function (item, index) {
                                            return item != $check.val();
                                        });
                                    }
                                }
                                updateMasterCheckbox();
                            });
                        });
                        function additionalData() {
                                var data = {
                                    SearchMaxSentTries: $('#@Html.IdFor(model => model.SearchMaxSentTries)').val()
                                };
                                addAntiForgeryToken(data);
                                return data;
                        }
                        function onDataBound(e) {

                            $('#queuedSms-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                                var currentId = $(this).val();
                                var checked = jQuery.inArray(currentId, selectedIds);
                                //set checked based on if current checkbox's value is in selectedIds.
                                $(this).attr('checked', checked > -1);
                            });

                            updateMasterCheckbox();
                        }

                        function updateMasterCheckbox() {
                            var numChkBoxes = $('#queuedSms-grid input[type=checkbox][id!=mastercheckbox]').length;
                            var numChkBoxesChecked = $('#queuedSms-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
                            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                        }
                    </script>
                    <nop-alert asp-alert-id="deleteSelectedFailed" />
                </div>
            </div>
        </div>
    </div>
</div>