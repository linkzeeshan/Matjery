@model CustomerSearchModel

@using System.Globalization;
@using Nop.Core.Domain.Media

@inject MediaSettings _mediaSettingsF

@{
    //page title
    ViewBag.PageTitle = T("Admin.Customers.Customers").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Customers list");
}

@{
    const string hideSearchBlockAttributeName = "CustomerListPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<form asp-controller="Customer" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Customers.Customers")
        </h1>
        <div class="pull-right">
            <a asp-action="Create" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @*  <li>
                            <button asp-action="ExportXML" type="submit" name="exportxml-all">
                                <i class="fa fa-file-code-o"></i>
                                @T("Admin.Common.ExportToXml.All")
                            </button>
                        </li>
                        <li>
                            <button type="button" id="exportxml-selected">
                                <i class="fa fa-file-code-o"></i>
                                @T("Admin.Common.ExportToXml.Selected")
                            </button>
                        </li>*@
                    <li class="divider"></li>
                    <li>
                        <button asp-action="ExportExcel" type="submit" name="exportexcel-all">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportexcel-selected">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.Selected")
                        </button>
                    </li>
                </ul>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Import")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="button" name="importexcelcustomer" data-toggle="modal" data-target="#importexcel-customer-window">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.Import.Customer")
                        </button>
                    </li>
                    <li>
                        <button type="button" name="importexceladdress" data-toggle="modal" data-target="#importexcel-address-window">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.Import.Customer.Address")
                        </button>
                    </li>
                </ul>
            </div>


            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.CustomerListButtons })
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                        </div>
                        <div class="search-body @(hideSearchBlock ? "closed" : "")">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchEmail" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchEmail" />
                                        </div>
                                    </div>
                                    @if (Model.UsernamesEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="SearchUsername" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="SearchUsername" />
                                            </div>
                                        </div>
                                    }
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchFirstName" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchFirstName" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchLastName" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchLastName" />
                                        </div>
                                    </div>
                                    @if (Model.DateOfBirthEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="SearchDayOfBirth" />
                                            </div>
                                            <div class="col-md-8">
                                                @{
                                                    var monthOfBirthValues = new List<SelectListItem>();
                                                    monthOfBirthValues.Add(new SelectListItem { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Month").Text, Value = "0" });
                                                    for (var i = 1; i <= 12; i++)
                                                    {
                                                        monthOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                    }
                                                    var dayOfBirthValues = new List<SelectListItem>();
                                                    dayOfBirthValues.Add(new SelectListItem { Text = T("Admin.Customers.Customers.List.SearchDateOfBirth.Day").Text, Value = "0" });
                                                    for (var i = 1; i <= 31; i++)
                                                    {
                                                        dayOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                    }
                                                }
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <nop-select asp-for="SearchMonthOfBirth" asp-items="@monthOfBirthValues" />
                                                    </div>
                                                    <div class="col-md-6">
                                                        <nop-select asp-for="SearchDayOfBirth" asp-items="@dayOfBirthValues" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-7">
                                    @if (Model.CompanyEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="SearchCompany" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="SearchCompany" />
                                            </div>
                                        </div>
                                    }
                                    @if (Model.PhoneEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="SearchPhone" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="SearchPhone" />
                                            </div>
                                        </div>
                                    }
                                    @if (Model.ZipPostalCodeEnabled)
                                    {
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <nop-label asp-for="SearchZipPostalCode" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="SearchZipPostalCode" />
                                            </div>
                                        </div>
                                    }
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchIpAddress" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchIpAddress" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SelectedCustomerRoleIds" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="SelectedCustomerRoleIds" asp-items="Model.AvailableCustomerRoles" asp-multiple="true" />
                                            <script>
                                            $(document).ready(function() {
                                                var rolesIdsInput =
                                                    $('#@Html.IdFor(model => model.SelectedCustomerRoleIds)')
                                                        .data("kendoMultiSelect");
                                                rolesIdsInput.setOptions({
                                                    autoClose: false,
                                                    filter: "contains"
                                                });

                                                @if (Model.AvailableCustomerRoles.Count == 0)
                                                {
                                                    <text>
                                                        rolesIdsInput.setOptions({
                                                            enable: false,
                                                            placeholder:
                                                                '@T("Admin.Catalog.Products.CustomerRoles.NoCustomerRolesAvailable")'
                                                        });
                                                        rolesIdsInput._placeholder();
                                                        rolesIdsInput._enable();
                                                    </text>
                                                }
                                            });
                                            </script>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="CountryId" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="CountryId" asp-items="@Model.AvailableCountries" />
                                            @Html.ValidationMessageFor(model => model.CountryId)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="StateProvinceId" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="StateProvinceId" asp-items="@Model.AvailableStates" />
                                            @Html.ValidationMessageFor(model => model.StateProvinceId)
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchForVendors" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchForVendors" asp-value="fasle" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-7 col-md-offset-5">
                                    <button type="button" id="search-customers" class="btn btn-primary btn-search">
                                        <i class="fa fa-search"></i>
                                        @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        @{
                            var gridModel = new DataTablesModel
                            {
                                Name = "customers-grid",
                                UrlRead = new DataUrl("CustomerList", "Customer", null),
                                SearchButtonId = "search-customers",
                                Length = Model.PageSize,

                                LengthMenu = Model.AvailablePageSizes,


                                Filters = new List<FilterParameter>
                                                {
                                    new FilterParameter(nameof(Model.SelectedCustomerRoleIds)),
                                    new FilterParameter(nameof(Model.SearchEmail)),
                                    new FilterParameter(nameof(Model.SearchUsername)),
                                    new FilterParameter(nameof(Model.SearchFirstName)),
                                    new FilterParameter(nameof(Model.SearchLastName)),
                                    new FilterParameter(nameof(Model.SearchDayOfBirth)),
                                    new FilterParameter(nameof(Model.SearchMonthOfBirth)),
                                    new FilterParameter(nameof(Model.SearchCompany)),
                                    new FilterParameter(nameof(Model.SearchPhone)),
                                    new FilterParameter(nameof(Model.SearchZipPostalCode)),
                                    new FilterParameter(nameof(Model.SearchIpAddress)),
                                    new FilterParameter(nameof(Model.CountryId)),
                                    new FilterParameter(nameof(Model.StateProvinceId)),
                                    new FilterParameter(nameof(Model.SearchForVendors))
                                }
                            };

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Id))
                            {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_customers", "mastercheckbox"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Width = "30",



                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Id))
                            {
                                Title = T("Admin.Customers.Customers.Fields.CustomerId").Text,
                                Width = "50"
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Email))
                            {
                                Title = T("Admin.Customers.Customers.Fields.Email").Text
                            });
                            if (Model.AvatarEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.AvatarUrl))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Avatar").Text,
                                    Width = "140",
                                    Render = new RenderPicture()
                                });
                            }
                            if (Model.UsernamesEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Username))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Username").Text
                                });
                            }
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.FullName))
                            {
                                Title = T("Admin.Customers.Customers.Fields.FullName").Text

                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.CustomerRoleNames))
                            {
                                Title = T("Admin.Customers.Customers.Fields.CustomerRoles").Text

                            });
                            if (Model.CompanyEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Company))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Company").Text

                                });
                            }
                            if (Model.PhoneEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Phone))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.Phone").Text

                                });
                            }
                            if (Model.ZipPostalCodeEnabled)
                            {
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.ZipPostalCode))
                                {
                                    Title = T("Admin.Customers.Customers.Fields.ZipPostalCode").Text

                                });
                            }
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Active))
                            {
                                Title = T("Admin.Customers.Customers.Fields.Active").Text,
                                Width = "70",
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Render = new RenderBoolean()

                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.CreatedOn))
                            {
                                Title = T("Admin.Customers.Customers.Fields.CreatedOn").Text,
                                Render = new RenderDate()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.LastActivityDate))
                            {
                                Title = T("Admin.Customers.Customers.Fields.LastActivityDate").Text,
                                Render = new RenderDate()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.TotalBlackPoints))
                            {
                                Title = T("Admin.Promotions.BlackPoints").Text
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Id))
                            {
                                Title = T("Admin.Common.Edit").Text,
                                Width = "80",
                                ClassName = NopColumnClassDefaults.Button,
                                Render = new RenderButtonEdit(new DataUrl("Edit"))


                            });
                        }
                        @await Html.PartialAsync("Table", gridModel)
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Customer" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>
<script>
    $(document).ready(function () {

        //$('#search-customers').click(function () {
        //    var grid = $('#customers-grid').data('kendoGrid');
        //    grid.dataSource.page(1); //new search. Set page size to 1
        //    //grid.dataSource.read(); we already loaded the grid above using "page" function
        //    //clear selected checkboxes
        //    $('.checkboxGroups').attr('checked', false).change();
        //    selectedIds = [];
        //    return false;
        //});
        var selectedIds = [];
        $('#SearchForVendors').val(false);
        $('#SearchForVendors').change(function () {
            if (this.checked) {
                $('#SearchForVendors').val(true);
                $("#search-customers").click();
                return false;
            } else {
                $('#SearchForVendors').val(false);
                $("#search-customers").click();
                return false;
            }

                                $("".concat("#@Html.IdFor(model => model.SearchEmail),",
                                    "#@Html.IdFor(model => model.SearchUsername),",
                                    "#@Html.IdFor(model => model.SearchFirstName),",
                                    "#@Html.IdFor(model => model.SearchLastName),",
                                    "#@Html.IdFor(model => model.SearchCompany),",
                                    "#@Html.IdFor(model => model.SearchPhone),",
                                    "#@Html.IdFor(model => model.SearchZipPostalCode),",
                                    "#@Html.IdFor(model => model.SearchIpAddress)")).keydown(function(event) {
                                        if (event.keyCode === 13) {
                                            $("#search-customers").click();
                                            return false;
                                        }
                                    });

                                $('#mastercheckbox').click(function() {
                                    $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                                });

                                //wire up checkboxes.
                                $('#customers-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function(e) {
                                    var $check = $(this);
                                    if ($check.is(":checked") == true) {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked == -1) {
                                            //add id to selectedIds.
                                            selectedIds.push($check.val());
                                        }
                                    } else {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked > -1) {
                                            //remove id from selectedIds.
                                            selectedIds = $.grep(selectedIds, function(item, index) {
                                                return item != $check.val();
                                            });
                                        }
                                    }
                                    updateMasterCheckbox();
                                });
        });


        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");

            if (!ids) {
                $('#exportXmlSelected-info').text("@T("Admin.Customers.NoCustomers")");
                $("#exportXmlSelected").click();
            }
            else {
                $('#export-xml-selected-form #selectedIds').val(ids);
                $('#export-xml-selected-form').submit();
                updateTable('#customers-grid');
            }
            return false;
        });
    });
    function onDataBound(e) {
        $('#customers-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
            var currentId = $(this).val();
            var checked = jQuery.inArray(currentId, selectedIds);
            //set checked based on if current checkbox's value is in selectedIds.
            $(this).attr('checked', checked > -1);
        });

        updateMasterCheckbox();
    }

    function updateMasterCheckbox() {
        var numChkBoxes = $('#customers-grid input[type=checkbox][id!=mastercheckbox]').length;
        var numChkBoxesChecked = $('#customers-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
        $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
    }
</script>
<nop-alert asp-alert-id="exportXmlSelected" />

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Customer" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>
<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportExcelSelected-info').text("@T("Admin.Customers.NoCustomers")");
                $("#exportExcelSelected").click();
            }
            else {
                $('#export-excel-selected-form #selectedIds').val(ids);
                $('#export-excel-selected-form').submit();
                updateTable('#customers-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportExcelSelected" />

@*import customers form*@
<div id="importexcel-customer-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="importexcel-window-title">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="importexcel-window-title">@T("Admin.Common.ImportFromExcel")</h4>
            </div>
            @using (Html.BeginForm("ImportExcelCustomer", "Customer", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <div class="col-md-2">
                                <div class="label-wrapper">
                                    <label class="control-label">
                                        @T("Admin.Common.ExcelFile")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-10">
                                <input type="file" id="importexcelfile" name="importexcelfile" class="form-control" accept=".xlsx,.xls,.csv" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">

                        <button type="submit" class="btn btn-primary">
                            @T("Admin.Common.ImportFromExcel")
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@*import addrsses form*@
<div id="importexcel-address-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="importexcel-window-title">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="importexcel-window-title">@T("Admin.Common.ImportFromExcel")</h4>
            </div>
            @using (Html.BeginForm("ImportExcelAddress", "Customer", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <div class="col-md-2">
                                <div class="label-wrapper">
                                    <label class="control-label">
                                        @T("Admin.Common.ExcelFile")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-10">
                                <input type="file" id="importexcelfile" name="importexcelfile" class="form-control" accept=".xlsx,.xls,.csv" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            @T("Admin.Common.ImportFromExcel")
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
