@model ProductSearchModel
@using Nop.Core.Domain.Catalog;
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
}
@if (Model.SearchVendorId > 0)
{

<div class="panel-body">


    @*new RouteValueDictionary { [nameof(Model.CategoryProductSearchModel.CategoryId)] = Model.CategoryProductSearchModel.CategoryId }*@

    @await Html.PartialAsync("Table", new DataTablesModel
{
   Name = "products-grid",
   UrlRead = new DataUrl("ProductList", "Product", new RouteValueDictionary { [nameof(Model.SearchVendorId)] = Model.SearchVendorId }),
   Length = Model.PageSize,
   LengthMenu = Model.AvailablePageSizes,
   Filters = new List<FilterParameter>
                          {
                          new FilterParameter(nameof(Model.SearchVendorId))
                          },
   ColumnCollection = new List<ColumnProperty>
                          {
                          new ColumnProperty(nameof(ProductModel.Id))
                          {
                          //IsMasterCheckBox = true,
                          //Render = new RenderCheckBox("checkbox_products"),
                          ClassName =  NopColumnClassDefaults.CenterAll,
                          Width = "50"
                          },
                          new ColumnProperty(nameof(ProductModel.PictureThumbnailUrl))
                          {
                          Title = T("Admin.Catalog.Products.Fields.PictureThumbnailUrl").Text,
                          Width = "100",
                          Render = new RenderPicture()
                          },
                          new ColumnProperty(nameof(ProductModel.Name))
                          {
                          Title = T("Admin.Catalog.Products.Fields.Name").Text,
                           Width = "300"
                          },
                          new ColumnProperty(nameof(ProductModel.Sku))
                          {
                          Title = T("Admin.Catalog.Products.Fields.Sku").Text,
                          Width = "150"
                          },
                          new ColumnProperty(nameof(ProductModel.Price))
                          {
                          Title = T("Admin.Catalog.Products.Fields.Price").Text,
                          Width = "100",
                          Render = new RenderCustom("renderColumnPrice")
                          },
                          new ColumnProperty(nameof(ProductModel.StockQuantityStr))
                          {
                          Title = T("Admin.Catalog.Products.Fields.StockQuantity").Text,
                          Width = "200"
                          },
                          new ColumnProperty(nameof(ProductModel.CreatedOn))
                          {
                          Title = T("admin.catalog.productreviews.fields.createdon").Text,
                          Width = "200"
                          },
                          new ColumnProperty(nameof(ProductModel.Published))
                          {
                          Title = T("Admin.Catalog.Products.Fields.Published").Text,
                          Width = "100",
                          ClassName = NopColumnClassDefaults.CenterAll,
                          Render = new RenderBoolean()
                          },
                          new ColumnProperty(nameof(ProductModel.Id))
                          {
                          Title = T("Admin.Common.Edit").Text,
                          Width = "100",
                          ClassName =  NopColumnClassDefaults.Button,
                          Render = new RenderButtonView(new DataUrl("~/Admin/Product/Edit/"))
                          }
                          }
})

</div>
    <div class="panel-footer">
        <button type="submit" id="btnAddNewProduct"
                onclick="javascript:OpenWindow('@(Url.Action("Create", "Product", new { vendor = Model.SearchVendorId}))', 800, 800, true); return false;"
                class="btn btn-primary">
            @T("Admin.Catalog.Categories.Products.AddNew")
        </button>
        <input type="submit" id="btnRefreshProducts" style="display: none" />
        <script>
            function renderColumnPrice(data, type, row, meta) {
                                return (row.ProductTypeId != @((int)ProductType.GroupedProduct) ) ? data : null;
                            }
            $(document).ready(function () {
                $('#btnRefreshProducts').click(function () {
                    //refresh grid
                    //updateTable('#products-grid');

                    //return false to don't reload a page
                    return false;
                });
            });
        </script>
    </div>
}
else
{
    <div class="panel-body">
        @T("Admin.Catalog.Categories.Products.SaveBeforeEdit")
    </div>
}

