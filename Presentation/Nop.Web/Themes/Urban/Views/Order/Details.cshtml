@model OrderDetailsModel
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Core.Domain.Orders
@inject IWorkContext workContext
@{
    if (!Model.PrintMode)
    {
        Layout = "_ColumnsOne";
    }
    else
    {
        Layout = "_Print";
    }
    //title
    Html.AddTitleParts(T("PageTitle.OrderDetails").Text);
    //page class
    Html.AppendPageCssClassParts("html-order-details-page");
    Html.AppendCssFileParts("~/css/admin/jquery-confirm.min.css");
    Html.AddScriptParts("~/js/jquery-confirm.min");
}
<link href="~/css/admin/jquery-confirm.min.css" rel="stylesheet" />
<style>
    .order-details-page .action-buttons a {
        flex-basis: 16%;
    }
</style>


@if (Model.PrintMode)
{
    <script type="text/javascript" asp-location="Footer">
        $(document).ready(function () {
            document.getElementById('custom-modal-id').style.visibility = "hidden";
            window.print();
        });
    </script>
}
<div class="page order-details-page">
    @if (!Model.PrintMode)
    {
        <div class="page-title">
            <h1>@T("Order.OrderInformation")</h1>
            <div class="action-buttons">
                <a href="@Url.RouteUrl("PrintOrderDetails", new { orderId = Model.Id })" target="_blank" class="button-2 print-order-button">@T("Order.Print")</a>
                @if (!Model.PdfInvoiceDisabled)
                {
                    <a href="@Url.RouteUrl("GetOrderPdfInvoice", new { orderId = Model.Id })" class="button-2 pdf-invoice-button">@T("Order.GetPDFInvoice")</a>
                }
                @if (Model.OrderStatusId == 10)
                {

                    <button onclick="document.getElementById('custom-modal-id').style.display='block'" class="cancel-button button-2 pdf-invoice-button" style="background-color: #dd4b39; border-color: snow;"> @T("order.cancelorder")</button>
                }
            </div>
        </div>
    }
    <div id="custom-modal-id" class="custom-modal custom-modal-class">
        <form class="custom-modal-content">
            <div class="custom-modal-container">

                <div class="custom-modal-header">
                    <span onclick="document.getElementById('custom-modal-id').style.display='none'" class="custom-modal-close" title="Close Modal">
                        <img src="~/icons/cross-icon.svg" />
                    </span>

                </div>
                <div class="custom-modal-body">
                    <h1>@T("order.cancelorder")</h1>
                    <p>@T("common.cancelconfirmation")</p>
                </div>

                <div class="custom-modal-footer">
                    <button type="button" onclick="document.getElementById('custom-modal-id').style.display='none'" class="button-2 btn btn-default">@T("common.no")</button>
                    <a href="@Url.ActionLink("CancelOrder","order", new { Id = Model.Id })" class="button-2" style="background-color: #dd4b39; border-color: snow;">@T("common.yes")</a>
                </div>
            </div>
        </form>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageTop, additionalData = Model })
        <div class="order-overview card status-board">
            <div class="row">
                <div class="col col-25 @(Model.OrderStatusId == 10 ? "active-status" : Model.OrderStatusId > 10 ? "done-status " : string.Empty)">
                    <i class="fi-pending"></i><div>@T("enums.nop.core.domain.orders.orderstatus.pending")</div>
                </div>
                <div class="col col-25 @(Model.OrderStatusId == 20 ? "active-status" : Model.OrderStatusId > 20 ? "done-status " : string.Empty)">
                    <i class="fi-processing"></i><div>@T("enums.nop.core.domain.orders.orderstatus.processing")</div>
                </div>
                <div class="col col-25 @(Model.OrderStatusId == 30 ? "active-status" : Model.OrderStatusId > 30 ? "done-status " : string.Empty )">
                    <i class="fi-delivered"></i><div>@T("enums.nop.core.domain.orders.orderstatus.complete")</div>
                </div>
                <div class="col col-25 @(Model.OrderStatusId == 40 ? "active-status" : Model.OrderStatusId > 40 ? "done-status " : string.Empty )">
                    <i class="fi-cancel"></i><div>@T("enums.nop.core.domain.orders.orderstatus.cancelled")</div>
                </div>
            </div>
        </div>
        <div class="order-overview">
            <div class="order-number">
                <strong>@T("Order.Order#")@Model.CustomOrderNumber</strong>
            </div>
            <div class="order-date">
                @T("Order.OrderDate"): @Model.CreatedOn.ToString("D")
            </div>
            <div class="order-status">
                @T("Order.OrderStatus"): @Model.OrderStatus
            </div>
            <div class="order-total">
                @T("Order.OrderTotal"): <strong>@Model.OrderTotal</strong>
            </div>
            @if (Model.CanPlaceBlackPoint)
            {
                <div class="add-black-point">
                    <a href="@Url.RouteUrl("BlackPoint", new {  OrderId = Model.Id ,mode="buyermode"})" class="button-2 black-point print-order-button">@T("AddBlackPoint")</a>
                </div>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageOverview, additionalData = Model })
        </div>
        <div class="order-details-area">
            <ul class="billing-info">
                <li class="title">
                    <strong>
                        @T("Order.BillingAddress")
                    </strong>
                </li>
                <li class="name">
                    @Model.BillingAddress.FirstName @Model.BillingAddress.LastName
                </li>
                <li class="email">
                    @T("Order.Email"): @Model.BillingAddress.Email
                </li>
                @if (Model.BillingAddress.PhoneEnabled)
                {
                    <li class="phone">
                        @T("Order.Phone"): @Model.BillingAddress.PhoneNumber
                    </li>
                }
                @if (Model.BillingAddress.FaxEnabled)
                {
                    <li class="fax">
                        @T("Order.Fax"): @Model.BillingAddress.FaxNumber
                    </li>
                }
                @if (Model.BillingAddress.CompanyEnabled && !String.IsNullOrEmpty(Model.BillingAddress.Company))
                {
                    <li class="company">
                        @Model.BillingAddress.Company
                    </li>
                }
                @if (Model.BillingAddress.StreetAddressEnabled)
                {
                    <li class="address1">
                        @Model.BillingAddress.Address1
                    </li>
                }
                @if (Model.BillingAddress.StreetAddress2Enabled && !String.IsNullOrEmpty(Model.BillingAddress.Address2))
                {
                    <li class="address2">
                        @Model.BillingAddress.Address2
                    </li>
                }
                @if (Model.BillingAddress.CityEnabled && !string.IsNullOrEmpty(Model.BillingAddress.City) ||
         Model.BillingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.County) ||
         Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
         Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                {
                    <li class="city-state-zip">
                        @if (Model.BillingAddress.CityEnabled && !string.IsNullOrEmpty(Model.BillingAddress.City))
                        {
                            @Model.BillingAddress.City
                            @if (Model.BillingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.County) ||
                     Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
                     Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                            {
                                <text>,</text>
                            }
                        }
                        @if (Model.BillingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.County))
                        {
                            @Model.BillingAddress.County
                            @if (Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
                     Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                            {
                                <text>,</text>
                            }
                        }
                        @if (Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName))
                        {
                            @Model.BillingAddress.StateProvinceName
                            @if (Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                            {
                                <text>,</text>
                            }
                        }
                        @if (Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                        {
                            @Model.BillingAddress.ZipPostalCode
                        }
                    </li>
                }
                @if (Model.BillingAddress.CountryEnabled && !String.IsNullOrEmpty(Model.BillingAddress.CountryName))
                {
                    <li class="country">
                        @Model.BillingAddress.CountryName
                    </li>
                }
                @if (!String.IsNullOrEmpty(Model.VatNumber))
                {
                    <li class="vat">
                        <span class="label">
                            @T("Order.VATNumber")
                        </span>
                        <span class="value">
                            @Model.VatNumber
                        </span>
                    </li>
                }
                @if (!String.IsNullOrEmpty(Model.BillingAddress.FormattedCustomAddressAttributes))
                {
                    <li class="custom-attributes-view">
                        @Html.Raw(Model.BillingAddress.FormattedCustomAddressAttributes)
                    </li>
                }

                @*@if (!String.IsNullOrEmpty(Model.PaymentMethod))
                    {
                        <li class="title">
                            <strong>@T("Order.Payment")</strong>
                        </li>
                        <li class="payment-method">
                            <span class="label">
                                @T("Order.Payment.Method"):
                            </span>
                            <span class="value">
                                @Model.PaymentMethod
                            </span>
                        </li>
                        if (!Model.PrintMode)
                        {
                            <li class="payment-method-status">
                                <span class="label">
                                    @T("Order.Payment.Status"):
                                </span>
                                <span class="value">
                                    @Model.PaymentMethodStatus
                                </span>
                            </li>
                        }
                        if (!Model.PrintMode && Model.CanRePostProcessPayment)
                        {

                            <li class="repost">
                                <form asp-route="OrderDetails" method="post">
                                    <input type="submit" name="repost-payment" value="@T("Order.RetryPayment")" class="button-2 re-order-button" />
                                    <p class="hint">
                                        <em>@T("Order.RetryPayment.Hint")</em>
                                    </p>
                                </form>
                            </li>
                        }
                    }*@

                @if (Model.CustomValues != null)
                {
                    foreach (var item in Model.CustomValues)
                    {
                        <li class="custom-value">
                            <span class="label">
                                @item.Key:
                            </span>
                            <span class="value">
                                @(item.Value != null ? item.Value.ToString() : "")
                            </span>
                        </li>
                    }
                }
            </ul>
            @if (Model.IsShippable)
            {
                <ul class="shipping-info">
                    @if (!Model.PickupInStore)
                    {
                        <li class="title">
                            <strong>
                                @T("Order.ShippingAddress")
                            </strong>
                        </li>
                        <li class="name">
                            @Model.ShippingAddress.FirstName @Model.ShippingAddress.LastName
                        </li>
                        <li class="email">
                            @T("Order.Email"): @Model.ShippingAddress.Email
                        </li>
                        if (Model.ShippingAddress.PhoneEnabled)
                        {
                            <li class="phone">
                                @T("Order.Phone"): @Model.ShippingAddress.PhoneNumber
                            </li>
                        }
                        if (Model.ShippingAddress.FaxEnabled)
                        {
                            <li class="fax">
                                @T("Order.Fax"): @Model.ShippingAddress.FaxNumber
                            </li>
                        }
                        if (Model.ShippingAddress.CompanyEnabled && !String.IsNullOrEmpty(Model.ShippingAddress.Company))
                        {
                            <li class="company">
                                @Model.ShippingAddress.Company
                            </li>
                        }
                        if (Model.ShippingAddress.StreetAddressEnabled)
                        {
                            <li class="address1">
                                @Model.ShippingAddress.Address1
                            </li>
                        }
                        if (Model.ShippingAddress.StreetAddress2Enabled && !String.IsNullOrEmpty(Model.ShippingAddress.Address2))
                        {
                            <li class="address2">
                                @Model.ShippingAddress.Address2
                            </li>
                        }
                        @if (Model.ShippingAddress.CityEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.City) ||
                 Model.ShippingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.County) ||
                 Model.ShippingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
                 Model.ShippingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                        {
                            <li class="city-state-zip">
                                @if (Model.ShippingAddress.CityEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.City))
                                {
                                    @Model.ShippingAddress.City
                                    @if (Model.ShippingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.County) ||
                             Model.ShippingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
                             Model.ShippingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                    {
                                        <text>,</text>
                                    }
                                }
                                @if (Model.ShippingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.County))
                                {
                                    @Model.ShippingAddress.County
                                    @if (Model.ShippingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
                             Model.ShippingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                    {
                                        <text>,</text>
                                    }
                                }
                                @if (Model.ShippingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName))
                                {
                                    @Model.ShippingAddress.StateProvinceName
                                    @if (Model.ShippingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                    {
                                        <text>,</text>
                                    }
                                }
                                @if (Model.ShippingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                {
                                    @Model.ShippingAddress.ZipPostalCode
                                }
                            </li>
                        }
                        if (Model.ShippingAddress.CountryEnabled && !String.IsNullOrEmpty(Model.ShippingAddress.CountryName))
                        {
                            <li class="country">
                                @Model.ShippingAddress.CountryName
                            </li>
                        }
                        if (!String.IsNullOrEmpty(Model.ShippingAddress.FormattedCustomAddressAttributes))
                        {
                            <li class="custom-attributes-view">
                                @Html.Raw(Model.ShippingAddress.FormattedCustomAddressAttributes)
                            </li>
                        }
                    }
                    @*<li class="title">
                            <strong>@T("Order.Shipping")</strong>
                        </li>
                        <li class="shipping-method">
                            <span class="label">
                                @T("Order.Shipping.Name"):
                            </span>
                            <span class="value">
                                @Model.ShippingMethod
                            </span>
                        </li>
                        @if (!Model.PrintMode && !Model.PickupInStore)
                        {
                            <li class="shipping-status">
                                <span class="label">
                                    @T("Order.Shipping.Status"):
                                </span>
                                <span class="value">
                                    @Model.ShippingStatus
                                </span>
                            </li>
                        }*@
                </ul>
            }
        </div>

        @if (Model.Items.Count > 0)
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageBeforeproducts, additionalData = Model })
            <div class="section products">
                <div class="title">
                    <strong>@T("Order.Product(s)")</strong>
                </div>
                <div class="table-wrapper">
                    <table class="data-table">
                        <colgroup>
                            <col />
                            @if (Model.ShowSku)
                            {
                                <col width="1" />
                            }
                            <col />
                            @if (!Model.PrintMode)
                            {
                                <col width="1" />
                            }
                            @if (Model.ShowVendorName)
                            {
                                <col width="1" />
                            }
                            <col />
                            <col />
                            <col />
                        </colgroup>
                        <thead>
                            <tr>
                                <th><span class="item-count">#</span></th>
                                @if (Model.ShowSku)
                                {
                                    <th class="sku" data-hide="w410, w480, w580, w768">
                                        @T("Order.Product(s).SKU")
                                    </th>
                                }
                                <th class="name">
                                    @T("Order.Product(s).Name")
                                </th>
                                @if (!Model.PrintMode)
                                {
                                    <th data-hide="w410, w480, w580">@T("SevenSpikes.Themes.Urban.Common.GoTo")</th>
                                }
                                @if (Model.ShowVendorName)
                                {
                                    <th class="vendor" data-hide="w410, w480, w580">
                                        @T("Order.Product(s).VendorName")
                                    </th>
                                }
                                <th class="price" data-hide="w410, w480">
                                    @T("Order.Product(s).Price")
                                </th>
                                <th class="quantity" data-hide="w410, w480">
                                    @T("Order.Product(s).Quantity")
                                </th>
                                <th class="total">
                                    @T("Order.Product(s).Total")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{var counter = 0;}
                            @foreach (var item in Model.Items)
                            {
                                counter++;
                                <tr>
                                    <td><span class="item-count">@counter</span></td>
                                    @if (Model.ShowSku)
                                    {
                                        <td class="sku">
                                            @item.Sku
                                        </td>
                                    }
                                    <td class="name">
                                        @item.ProductName
                                        @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }
                                        @if (!String.IsNullOrEmpty(item.RentalInfo))
                                        {
                                            <div class="rental-info">
                                                @Html.Raw(item.RentalInfo)
                                            </div>
                                        }
                                        @if (item.DownloadId > 0)
                                        {
                                            <div class="download">
                                                <a href="@Url.RouteUrl("GetDownload", new { orderItemId = item.OrderItemGuid })">@T("DownloadableProducts.Fields.Download")</a>
                                            </div>
                                        }
                                        @if (item.LicenseId > 0)
                                        {
                                            <div class="download license">
                                                <a href="@Url.RouteUrl("GetLicense", new {orderItemId = item.OrderItemGuid})">@T("DownloadableProducts.Fields.DownloadLicense")</a>
                                            </div>
                                        }
                                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsProductLine, additionalData = item })
                                    </td>
                                    @if (!Model.PrintMode)
                                    {
                                        <td>
                                            <a class="go-to-page" href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">@T("SevenSpikes.Themes.Urban.Common.GoToPage")</a>
                                        </td>
                                    }
                                    @if (Model.ShowVendorName)
                                    {
                                        <td class="vendor">
                                            @item.VendorName
                                        </td>
                                    }
                                    <td class="price">

                                        @item.UnitPrice
                                    </td>
                                    <td class="quantity">

                                        @item.Quantity
                                    </td>
                                    <td class="total">

                                        @item.SubTotal
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageAfterproducts, additionalData = Model })
                @if (Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                {
                    var inclTax = Model.PricesIncludeTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <div class="tax-shipping-info">
                        @T(inclTax ? "Order.TaxShipping.InclTax" : "Order.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }
                @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                {
                    <div class="selected-checkout-attributes">
                        @Html.Raw(Model.CheckoutAttributeInfo)
                    </div>
                }
                @*@if (!Model.PrintMode)
                    {
                        <div class="actions">
                            @if (Model.IsReOrderAllowed)
                            {
                                <input type="button" value="@T("Order.Reorder")" class="button-1 re-order-button" onclick="setLocation('@Url.RouteUrl("ReOrder", new { orderId = Model.Id })    ')" />
                            }
                            @if (Model.IsReturnRequestAllowed)
                            {
                                <input type="button" value="@T("Order.ReturnItems")" class="button-2 return-items-button" onclick="setLocation('@Url.RouteUrl("ReturnRequest", new { orderId = Model.Id })    ')" />
                            }
                        </div>
                    }*@
            </div>
        }
        <div class="total-info">
            <table class="cart-total">
                <tbody>
                    <tr>
                        <td class="cart-total-left">
                            <strong>
                                @T("Order.SubTotal"):
                            </strong>
                        </td>
                        <td class="cart-total-right">
                            <span class="nobr">
                                @Model.OrderSubtotal
                            </span>
                        </td>
                    </tr>
                    @if (!string.IsNullOrEmpty(Model.OrderSubTotalDiscount))
                    {
                        <tr>
                            <td class="cart-total-left">
                                <strong>
                                    @T("Order.SubTotalDiscount"):
                                </strong>
                            </td>
                            <td class="cart-total-right">
                                <span class="nobr">
                                    @Model.OrderSubTotalDiscount
                                </span>
                            </td>
                        </tr>
                    }
                    @if (Model.IsShippable)
                    {
                        <tr>
                            <td class="cart-total-left">
                                <strong>
                                    @T("Order.Shipping"):
                                </strong>
                            </td>
                            <td class="cart-total-right">
                                <span class="nobr">
                                    @Model.OrderShipping
                                </span>
                            </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(Model.PaymentMethodAdditionalFee))
                    {
                        <tr>
                            <td class="cart-total-left">
                                <strong>
                                    @T("Order.PaymentMethodAdditionalFee"):
                                </strong>
                            </td>
                            <td class="cart-total-right">
                                <span class="nobr">
                                    @Model.PaymentMethodAdditionalFee
                                </span>
                            </td>
                        </tr>
                    }
                    @if (Model.DisplayTaxRates && Model.TaxRates.Count > 0)
                    {
                        foreach (var taxRate in Model.TaxRates)
                        {
                            <tr>
                                <td class="cart-total-left">
                                    <strong>
                                        @string.Format(T("Order.TaxRateLine").Text, taxRate.Rate):
                                    </strong>
                                </td>
                                <td class="cart-total-right">
                                    <span class="nobr">
                                        @taxRate.Value
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                    @if (Model.DisplayTax)
                    {
                        <tr>
                            <td class="cart-total-left">
                                <strong>
                                    @T("Order.Tax"):
                                </strong>
                            </td>
                            <td class="cart-total-right">
                                <span class="nobr">
                                    @Model.Tax
                                </span>
                            </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(Model.OrderTotalDiscount))
                    {
                        <tr>
                            <td class="cart-total-left">
                                <strong>
                                    @T("Order.TotalDiscount"):
                                </strong>
                            </td>
                            <td class="cart-total-right">
                                <span class="nobr">
                                    @Model.OrderTotalDiscount
                                </span>
                            </td>
                        </tr>
                    }
                    @if (Model.GiftCards.Count > 0)
                    {
                        foreach (var gc in Model.GiftCards)
                        {
                            <tr>
                                <td class="cart-total-left">
                                    <strong>
                                        @string.Format(T("Order.GiftCardInfo").Text, gc.CouponCode):
                                    </strong>
                                </td>
                                <td class="cart-total-right">
                                    <span class="nobr">
                                        @gc.Amount
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                    @if (Model.RedeemedRewardPoints > 0)
                    {
                        <tr>
                            <td class="cart-total-left">
                                <strong>@string.Format(T("Order.RewardPoints").Text, Model.RedeemedRewardPoints):</strong>
                            </td>
                            <td class="cart-total-right">
                                <span class="nobr">
                                    @Model.RedeemedRewardPointsAmount
                                </span>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td class="cart-total-left">
                            <strong>
                                @T("Order.OrderTotal"):
                            </strong>
                        </td>
                        <td class="cart-total-right">
                            <span class="nobr">
                                <strong>
                                    @Model.OrderTotal
                                </strong>
                            </span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        @if (!Model.PrintMode)
        {
            if (Model.Shipments.Count > 0)
            {
                <div class="section shipments">
                    <div class="title">
                        <strong>@T("Order.Shipments")</strong>
                    </div>
                    <table class="data-table">
                        <colgroup>
                            <col width="1" />
                            <col width="1" />
                            <col />
                            <col />
                            <col />
                            <col />
                        </colgroup>
                        <thead>
                            <tr>
                                <th><span class="item-count">#</span></th>
                                <th class="shipment-id" data-hide="w410, w480, w580, w768">
                                    @T("Order.Shipments.ID")
                                </th>
                                <th class="tracking-number">
                                    @T("Order.Shipments.TrackingNumber")
                                </th>
                                <th class="shipping-date" data-hide="w410, w480, w580">
                                    @T("Order.Shipments.ShippedDate")
                                </th>
                                <th class="delivery-date" data-hide="w410, w480, w580">
                                    @T("Order.Shipments.DeliveryDate")
                                </th>
                                @*<th class="details">
                                        @T("Order.Shipments.ViewDetails")
                                    </th>*@
                            </tr>
                        </thead>
                        <tbody>
                            @{var counter = 0;}
                            @foreach (var item in Model.Shipments)
                            {
                                counter++;
                                <tr>
                                    <td><span class="item-count">@counter</span></td>
                                    <td class="shipment-id">
                                        @item.Id.ToString()
                                    </td>
                                    <td class="tracking-number">
                                        @item.TrackingNumber
                                    </td>
                                    <td class="shipped-date">
                                        @if (item.ShippedDate.HasValue)
                                        {
                                            <span>@item.ShippedDate.Value.ToString("D")</span>
                                        }
                                        else
                                        {
                                            <span>@T("Order.Shipments.ShippedDate.NotYet")</span>
                                        }
                                    </td>
                                    <td class="delivery-date">
                                        @if (item.DeliveryDate.HasValue)
                                        {
                                            <span>@item.DeliveryDate.Value.ToString("D")</span>
                                        }
                                        else
                                        {
                                            <span>@T("Order.Shipments.DeliveryDate.NotYet")</span>
                                        }
                                    </td>
                                    @*<td class="details">
                                            <a href="@Url.RouteUrl("ShipmentDetails", new { shipmentId = item.Id })" title="@T("Order.Shipments.ViewDetails")">@T("Order.Shipments.ViewDetails")</a>
                                        </td>*@
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
        @if (!Model.PrintMode)
        {
            if (Model.OrderNotes.Count > 0)
            {
                <div class="section order-notes">
                    <div class="title">
                        <strong>@T("Order.Notes")</strong>
                    </div>
                    <div class="table-wrapper">
                        <table class="data-table">
                            <colgroup>
                                <col />
                                <col />
                            </colgroup>
                            <thead>
                                <tr>
                                    <th class="created-on">
                                        @T("Order.Notes.CreatedOn")
                                    </th>
                                    <th class="note">
                                        @T("Order.Notes.Note")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.OrderNotes)
                                {
                                    <tr>
                                        <td class="created-on">
                                            @item.CreatedOn.ToString()
                                        </td>
                                        <td class="note">
                                            @Html.Raw(item.Note)
                                            @if (item.HasDownload)
                                            {
                                                <p class="download">
                                                    <a href="@Url.RouteUrl("GetOrderNoteFile", new { ordernoteid = item.Id })">@T("Order.Notes.Download")</a>
                                                </p>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
        <div class="oder-note-container">
            <div class="title">
                <strong>@T("order.notes.note"):</strong>
            </div>
            <div class="note">
                @T("order.notes.info")
            </div>
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageBottom, additionalData = Model })
    </div>
    <script src="~/lib/jquery/jquery-3.4.1.js"></script>
    <script src="~/js/jquery-confirm.min.js"></script>
    <script>
        // Get the modal
        var modal = document.getElementById('custom-modal-id');

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#order-delete').click(function () {
                   //$.confirm({
                   // //<i class="fa fa-folder" aria-hidden="true"></i>
                   // title: '<div><i class="fa fa-folder fa-4x" aria-hidden="true" style="color: #00A65A; max-width: 25%; margin-left:118px"></i><br><b style="margin-left:20px">Do you Want to delete order?</b> </div>',  //'Following highlighted changes have been applied to your Product Catalogue',
                   // content: '<span style="margin-left: 51px">Are you sure you want to delete order?</span>', //datatable,
                   // buttons: {

                   //     cancel: function () {
                   //         // $.alert('Canceled!');
                   //     },
                   //     delete: function () {

                           $.ajax({
        cache: false,
        type: "POST",
        url: "@Url.RouteUrl("Delete", new { orderId = Model.Id })",
        data: postData,
        error: function (jqXHR, textStatus, errorThrown) {
            //  $('#deleteSelectedFailed-info').text(errorThrown);
            //   $('#deleteSelectedFailed').click();
        },
        complete: function (jqXHR, textStatus) {
        }
    });

                        //},
                        //somethingElse: {
                        //    text: 'Something else',
                        //    btnClass: 'btn-blue',
                        //    keys: ['enter', 'shift'],
                        //    action: function () {
                        //        $.alert('Something else?');
                        //    }
                        //}
                    }
               // });
            });
        });
        function deleteOrder(){

                $.confirm({
                    //<i class="fa fa-folder" aria-hidden="true"></i>
                    title: '<div><i class="fa fa-folder fa-4x" aria-hidden="true" style="color: #00A65A; max-width: 25%; margin-left:118px"></i><br><b style="margin-left:20px">Do you Want to delete order?</b> </div>',  //'Following highlighted changes have been applied to your Product Catalogue',
                    content: '<span style="margin-left: 51px">Are you sure you want to delete order?</span>', //datatable,
                    buttons: {

                        cancel: function () {
                            // $.alert('Canceled!');
                        },
                        delete: function () {

                           $.ajax({
        cache: false,
        type: "POST",
        url: "@Url.RouteUrl("Delete", new { orderId = Model.Id })",
        data: postData,
        error: function (jqXHR, textStatus, errorThrown) {
            //  $('#deleteSelectedFailed-info').text(errorThrown);
            //   $('#deleteSelectedFailed').click();
        },
        complete: function (jqXHR, textStatus) {
        }
    });

                        },
                        //somethingElse: {
                        //    text: 'Something else',
                        //    btnClass: 'btn-blue',
                        //    keys: ['enter', 'shift'],
                        //    action: function () {
                        //        $.alert('Something else?');
                        //    }
                        //}
                    }
                });
            }
    </script>
</div>
