@model ProductDetailsModel.AddToCartModel
@using Nop.Core.Domain.Orders
@inject IJsonHelper Json;
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    <script asp_location="Footer">
        $(document).ready(function () {
            //start with hide the btn and qty inputs
            $('.add-to-cart-button').hide();
            $('.add-crt-hide-part').hide();
        });
    </script>
    <div class="add-to-cart">
        @if (Model.UpdatedShoppingCartItemId > 0)
        {
            <input asp-for="UpdatedShoppingCartItemId" type="hidden" />
        }
        @if (Model.CustomerEntersPrice)
        {
            <div class="customer-entered-price">
                <div class="price-input">
                    <label asp-for="CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                    @*round price*@
                    <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="enter-price-input" />
                </div>
                <div class="price-range">
                    @Model.CustomerEnteredPriceRange
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.MinimumQuantityNotification))
        {
            <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
        }
        @if (!Model.DisableBuyButton)
        {
            <script asp_location="Footer">
        $(document).ready(function () {

            //get price of item
            var priceCont =$('#price-@Model.ProductId').text().trim();
            if(priceCont) {
                priceCont = priceCont.replace(',', '');
            }
            var ret = priceCont.split(" ");
            var priceNumber = ret[0];
            var priceSing = ret[1];
            priceNumber = Number(priceNumber);
            // get qty of cart

            var addtocartid='#addtocart_@Model.ProductId';
            var EnteredQuantity =  addtocartid +"_EnteredQuantity";
            var cartQuantity =  addtocartid +"_CartQuantity";

            // calculate the price * qty
            var qty =  $(cartQuantity).val()
            var newprice = (priceNumber * Number(qty) );
            $('#price-@Model.ProductId').text(newprice +" "+ priceSing);

            var existInCart =@Json.Serialize(Model.ExistInCart);

            if(existInCart)
            {
                $('.add-crt-hide-part').show();
                $('.add-to-cart-button').hide();
            }
            else{
                $('.add-crt-hide-part').hide();
                $('.add-to-cart-button').show();
            }

            var noCartItems = true;

            $('.add-to-cart-button').click(function () {
                if (noCartItems) {
                    noCartItems = false;
                    $('.add-crt-hide-part').show();
                    $(EnteredQuantity).val(1);
                    $(cartQuantity).val(1);
                    $("#add-to-cart-button-@Model.ProductId").click();
                    $(this).hide();

                    // update cart icon
                    var cartIcon =  $('.cart-qty').text();
                    var  caNumber = parseInt(cartIcon);
                    $('.cart-qty').text(caNumber+1);
                    $("#added_msg").css("display","block");
                    setTimeout(function() {
                        $("#added_msg").css("display","none");
                    }, 1000);
                }

            });
            //add 1 Item from cart and server side
            $('.plus').click(function () {
                var qty =  $(cartQuantity).val()

                $(EnteredQuantity).val(1);
                    $("#add-to-cart-button-@Model.ProductId").click();
                $(cartQuantity).val(Number(qty) +1);
                newprice = newprice + priceNumber;
                newprice = Math.round(newprice);

                $('#price-@Model.ProductId').text(newprice +" "+ priceSing);

                // update cart icon
                var cartIcon =  $('.cart-qty').text();
                var  caNumber = parseInt(cartIcon);
                $('.cart-qty').text(caNumber+1);
                $("#added_msg").css("display","block");
                setTimeout(function() {
                    $("#added_msg").css("display","none");
                }, 1000);
            });

            //delete 1 Item from cart and server side
            $('.minus').click(function () {
                var qty =  $(cartQuantity).val()

                $(EnteredQuantity).val(-1);
                $("#add-to-cart-button-@Model.ProductId").click();
                $(cartQuantity).val(Number(qty) -1);
                newprice = newprice - priceNumber;
                newprice = Math.round(newprice);
                $('#price-@Model.ProductId').text(newprice +" "+ priceSing);
                    if(Number(qty) == 1)
                    {

                        $('.add-crt-hide-part').hide();
                        $('.add-to-cart-button').show();

                        $('#price-@Model.ProductId').text(priceNumber +" "+ priceSing);
                        newprice = priceNumber;

                        caNumber = 1;
                        noCartItems = true;
                    }

                // update cart icon
                var cartIcon =  $('.cart-qty').text();
                var  caNumber = parseInt(cartIcon);
                $('.cart-qty').text(caNumber-1);
                $("#removed_msg").css("display","block");
                setTimeout(function() {
                    $("#removed_msg").css("display","none");
                }, 1000);
            });

        });
            </script>
            <div class="add-to-cart-panel">
                <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label"></label>
                @if (Model.AllowedQuantities.Count > 0)
                {
                    <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" id="product_enteredQuantity_@Model.ProductId" class="qty-dropdown" aria-label=@T("Products.Qty.AriaLabel")></select>
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $("#product_enteredQuantity_@Model.ProductId").on("change", function () {
                                var data = {
                                    productId: @Model.ProductId,
                                    quantity: $('#product_enteredQuantity_@Model.ProductId').find(":selected").text()
                                };
                                $(document).trigger({ type: "product_quantity_changed", changedData: data });
                            });
                        });
                    </script>
                }
                else
                {
                    @*<span class="minus">-</span>
            <input asp-for="EnteredQuantity" id="product_enteredQuantity_@Model.ProductId" class="qty-input" type="text" aria-label=@T("Products.Qty.AriaLabel") />
            <span class="plus">+</span>*@

                    <span class="minus add-crt-hide-part" style="display:none">-</span>
                    @Html.HiddenFor(model => model.EnteredQuantity, new { @class = "qty-input add-crt-hide-part" })
                    @Html.TextBoxFor(model => model.CartQuantity, new { @class = "qty-input add-crt-hide-part", @style = "display:none" })
                    <span class="plus add-crt-hide-part" style="display:none">+</span>

                    //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                    <script type="text/javascript" asp-location="Footer">
                        $(document).ready(function () {
                            $("#@Html.IdFor(model => model.EnteredQuantity)").on("keydown", function(event) {
                                if (event.keyCode == 13) {
                                   // $("#add-to-cart-button-@Model.ProductId").trigger("click");
                                    $(".add-to-cart-button").trigger("click");
                                    return false;
                                }
                            });

                            $("#product_enteredQuantity_@Model.ProductId").on("input propertychange paste", function () {
                                var data = {
                                    productId: @Model.ProductId,
                                    quantity: $('#product_enteredQuantity_@Model.ProductId').val()
                                };
                                $(document).trigger({ type: "product_quantity_changed", changedData: data });
                            });
                        });
                    </script>
                }
                @{
                    var addToCartText = "";
                    if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                    @*<input type="button" id="add-to-cart-button-@Model.ProductId" class="button-1 add-to-cart-button" value="@addToCartText" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form');return false;" />*@
                    <input type="button" class="button-1 add-to-cart-button" value="@addToCartText" style="display:none" />
                    <a id="add-to-cart-button-@Model.ProductId" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form', this, true);return false;"></a>
                }

                @if (!Model.DisableWishlistButton && Model.UpdatedShoppingCartItemId == 0)
                {
                    <input type="button" id="add-to-wishlist-button-@Model.ProductId" class="button-2 add-to-wishlist-button" value="@T("ShoppingCart.AddToWishlist")" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.Wishlist })', '#product-details-form');return false;" />
                }
                <br /><span style="margin-top:10px;display:none;" id="added_msg">Item has been added to cart</span>
                <br /><span style="margin-top:10px;display:none;" id="removed_msg">Item has been removed from cart</span>
                @if (!string.IsNullOrEmpty(Model.PreOrderAvailabilityStartDateTimeUserTime))
                {
                    <div class="pre-order-availability-date">
                        <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                        @Html.Raw(Model.PreOrderAvailabilityStartDateTimeUserTime)
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })
    </div>
}