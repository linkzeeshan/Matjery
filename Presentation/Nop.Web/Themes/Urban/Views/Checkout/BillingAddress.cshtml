@model CheckoutBillingAddressModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-billing-address-page");
    int billingAddressCount = 0;
    int slidemaindiv = 0;

}
@using Nop.Core.Infrastructure;
@using Nop.Core;
@inject IWorkContext _workContext
@{
    var workLanguage = EngineContext.Current.Resolve<IWorkContext>().WorkingLanguage;
}
<style>
    /*  .owl-item {
        width: 326.225px !important;
    }
    .owl-carousel .owl-nav .owl-next, .owl-carousel .owl-nav .owl-prev {
        top: 14% !important;
    }*/
    .address-box {
        min-height: 290px !important;
    }
    button {
        display: flex;
        align-items: center;
        background-color: #f7ed83;
        background: #009ddc;
        border: #009ddc;
        border-radius: 0 0 6px 0px !important;
        color: white;
        width: 80px;
        float: right;
    }

    .defimg {
        padding: 8px;
        font-size: 15px;
    }
</style>


<div class="page checkout-page billing-address-page">
    <div class="page-title">
        <h1>@T("Checkout.BillingAddress")</h1>
    </div>
    @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Address })
    <div class="page-body checkout-data">
        <form asp-route="CheckoutBillingAddress" method="post">
            <div class="billing-addresses">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressTop })
                @if (Model.ShipToSameAddressAllowed)
                {
                    @*<div class="section ship-to-same-address">*@
                    <div class="section ship-to-same-address" style="display:none;">
                        <div class="selector">
                            <input asp-for="ShipToSameAddress" />
                            <label asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
                        </div>
                    </div>
                }

                @if (Model.ExistingAddresses.Count > 0)
                {
            <div class="section select-billing-address">

                <div class="title">
                    <strong>@T("Checkout.SelectBillingAddress")</strong>
                </div>
                @if (Model.InvalidExistingAddresses.Count > 0)
                {
                    <label class="min-amount-warning">
                        @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                    </label>
                }
                @if (Model.ExistingAddresses.Count > 0)
                {
                    <div class=@(Model.ExistingAddresses.Count > 1 ? "product-grid home-page-product-grid home-page-discounted-grid" : "" )>
                        <div class=@(Model.ExistingAddresses.Count > 1 ? "item-grid owl-carousel" : "product-address")>
                            @foreach (var item in Model.ExistingAddresses)
                            {
                                <div class="item-box">

                                    @*zeeshan*@
                                    <div class="address-grid">

                                        <div class="@(item.IsDefault ? "defaddress" : "billingaddresscls")">
                                            <ul class="address-box" style="display: flex;padding-bottom: 30px; padding-right: 30px;flex-direction: column;">
                                                @if (item.IsDefault)
                                                {
                                                    <button>

                                                        <i class="fi-home defimg" aria-hidden="true"></i>
                                                        <span>@T("Address.Fields.Default")</span>
                                                    </button>
                                                    @*<input type="button" value=@T("Address.Fields.Default") icon="fa fa-home" class="defbtn">*@

                                                }
                                                else
                                                {
                                                    <input type="button" icon="" class="" style=" opacity: 0; margin-bottom: 2px;">
                                                }
                                                <li class="name" style=" margin-top: 20px; font-size: 20px; margin-bottom: 9px; font: 20px/20px proxima-nova;">
                                                    <b> @item.FirstName @item.LastName</b>
                                                </li>
                                                <li class="email">
                                                    <label>@T("Address.Fields.Email"):</label>
                                                    <span>@item.Email</span>
                                                </li>
                                                @if (item.PhoneEnabled)
                                                {
                                                    <li class="phone">
                                                        <label>@T("Address.Fields.PhoneNumber"):</label>
                                                        <span>@item.PhoneNumber</span>
                                                    </li>
                                                }
                                                @if (item.FaxEnabled)
                                                {
                                                    <li class="fax">
                                                        <label>@T("Address.Fields.FaxNumber"):</label>
                                                        <span>@item.FaxNumber</span>
                                                    </li>
                                                }
                                                @if (item.CompanyEnabled && !string.IsNullOrEmpty(item.Company))
                                                {
                                                    <li class="company">
                                                        @item.Company
                                                    </li>
                                                }
                                                @if (item.StreetAddressEnabled)
                                                {
                                                    <li class="address1">
                                                        @item.Address1
                                                    </li>
                                                }
                                                @if (item.StreetAddress2Enabled && !string.IsNullOrEmpty(item.Address2))
                                                {
                                                    <li class="address2">
                                                        @item.Address2
                                                    </li>
                                                }
                                                @if (item.CityEnabled && !string.IsNullOrEmpty(item.City) ||
item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                {
                                                    <li class="city-state-zip">
                                                        @if (item.CityEnabled && !string.IsNullOrEmpty(item.City))
                                                        {
                                                            @item.City
                                                            @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                <text>,</text>
                                                            }
                                                        }
                                                        @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County))
                                                        {
                                                            @item.County
                                                            @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                <text>,</text>
                                                            }
                                                        }
                                                        @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName))
                                                        {
                                                            @item.StateProvinceName
                                                            @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                <text>,</text>
                                                            }
                                                        }
                                                        @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                        {
                                                            @item.ZipPostalCode
                                                        }
                                                    </li>
                                                }
                                                @if (item.CountryEnabled && !string.IsNullOrEmpty(item.CountryName))
                                                {
                                                    <li class="country">
                                                        @item.CountryName
                                                    </li>
                                                }
                                                @if (!string.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                                {
                                                    <li class="custom-attributes-view">
                                                        @Html.Raw(item.FormattedCustomAddressAttributes)
                                                    </li>
                                                }
                                            </ul>
                                            <div class="select-button">
                                                <input type="button" value="@T("Checkout.BillToThisAddress")" class="button-1 select-billing-address-button" onclick="selectBillingAddress@(item.Id)()" />
                                                <script asp-location="Footer">
                                                        function selectBillingAddress@(item.Id)() {
                                                            if ($('#@Html.IdFor(model => model.ShipToSameAddress)')
                                                                .is(':checked')) {
                                                                setLocation(
                                                                    '@Html.Raw(Url.RouteUrl("CheckoutSelectBillingAddress", new { addressId = item.Id, shipToSameAddress = "true" }))');
                                                            } else {
                                                                setLocation(
                                                                    '@Url.RouteUrl("CheckoutSelectBillingAddress", new { addressId = item.Id })');
                                                            }
                                                        }
                                                </script>
                                            </div>
                                        </div>





                                    </div>
                                    @*<div style="height:200px;width:300px;background:blue">

                            </div>*@
                                </div>
                            }
                        </div>
                    </div>
                }

            </div>
                }




                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressMiddle })
                <div class="section new-billing-address">
                    <div class="title">
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <strong>@T("Checkout.OrEnterNewAddress")</strong>
                        }
                        else
                        {
                            <strong>@T("Checkout.EnterBillingAddress")</strong>
                        }
                    </div>
                    <div class="enter-address">
                        <div asp-validation-summary="ModelOnly" class="message-error"></div>
                        @{
                            var dataDictAddress = new ViewDataDictionary(ViewData);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                            @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress);
                        }
                    </div>
                </div>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutBillingAddressBottom })
            <div class="buttons">
                <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="button-1 new-address-next-step-button" />
            </div>
        </form>
        <div class="section order-summary">
            <div class="title">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @await Component.InvokeAsync("OrderSummary")
        </div>
    </div>


    @*https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js*@
    <script>
        $(document).ready(function () {

            $('.owl-item').css('widt', '326.225px');
        });
    </script>
    <script asp-location="Footer">


       $('.home-page-discounted-grid .item-grid').owlCarousel({
            loop: true,
            margin: 10,
            responsiveClass: true,
            rtl: @(workLanguage.Rtl ? "true": "false"),
            responsive: {
                0: {
                    items: 1,
                    nav: true,
                    loop: false,
                },
                768: {
                    items: 3,
                    nav: true,
                    loop: false,
                },
                1024: {
                    items: 4,
                    nav: true,
                    loop: false,
                    margin: 10,
                }
            }
        });
    </script>
</div>
