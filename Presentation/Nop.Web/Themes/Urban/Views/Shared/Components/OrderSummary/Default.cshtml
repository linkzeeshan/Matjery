@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Tax

@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject IStoreContext storeContextview
@inject IViewComponentSelector viewComponentSelector
@{ 
        var home= storeContextview.CurrentStore.Url+"?Store=public";
}

<style>

  

    .button-plus {
        left: -13px;
    }

    .cart .cart-item-row .quantity .plus, .cart .cart-item-row .quantity .minus, .overview .add-to-cart .plus, .overview .add-to-cart .minus, .variant-overview .add-to-cart .plus, .variant-overview .add-to-cart .minus {
        float: none !important;
      /*  border-radius: 50%;*/
        padding: 7px 12px;
    }
    .cart .qty-input {
        border: none !important;
  
    }

</style>
<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="table-wrapper">
                <table class="cart">
                    <colgroup>
                        <col width="1" />

                        @if (Model.ShowSku)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowProductImages)
                        {
                            <col width="1" />
                        }
                        <col />
                        @if (Model.ShowVendorName)
                        {
                            <col width="1" />
                        }
                        <col width="1" />
                        <col width="200" />
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr class="cart-header-row">
                            <th><span class="item-count">#</span></th>

                            @if (Model.ShowSku)
                            {
                                <th class="sku" data-hide="w410, w480, w580, w768, w980">
                                    @T("ShoppingCart.SKU")
                                </th>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <th class="product-picture"></th>
                            }
                            <th class="product" data-hide="w410, w480, w580, w768">
                                @T("ShoppingCart.Product(s)")
                            </th>
                            @if (Model.ShowVendorName)
                            {
                                <th class="vendor" data-hide="w410, w480, w580, w768, w980">
                                    @T("ShoppingCart.VendorName")
                                </th>
                            }
                            <th class="unit-price" data-hide="w410, w480">
                                @T("ShoppingCart.UnitPrice")
                            </th>
                            <th class="quantity">
                                @T("ShoppingCart.Quantity")
                            </th>
                            @if (Model.IsEditable)
                            {
                                <th class="remove-from-cart" data-hide="w410, w480">
                                    @T("ShoppingCart.Remove")
                                </th>
                            }
                            <th class="subtotal">
                                @T("ShoppingCart.ItemTotal")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{var counter = 0;}
                        @foreach (var item in Model.Items)
                        {
                            counter++;
                        <tr class="cart-item-row">
                            <td><span class="item-count">@counter</span></td>

                            @if (Model.ShowSku)
                            {
                                <td class="sku">
                                    <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                    <span class="sku-number">@item.Sku</span>
                                </td>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <td class="product-picture">
                                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">
                                        @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                                        {
                                            @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                                            {
                                                ("src", item.Picture.ImageUrl),
                                                ("alt", item.Picture.AlternateText),
                                                ("title", item.Picture.Title)
                                            })
                                        }
                                        else
                                        {
                                            <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                        }
                                    </a>
                                </td>
                            }

                            <td class="product">
                                <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})" class="product-name">@item.ProductName</a>
                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="attributes">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                {
                                    <div class="recurring-info">
                                        @Html.Raw(item.RecurringInfo)
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(item.RentalInfo))
                                {
                                    <div class="rental-info">
                                        @Html.Raw(item.RentalInfo)
                                    </div>
                                }
                                @if (Model.IsEditable && item.AllowItemEditing)
                                {
                                    var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                    <div class="edit-item">
                                        <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                    </div>
                                }
                                @if (item.Warnings.Count > 0)
                                {
                                    <div class="message-error">
                                        <ul>
                                            @foreach (var warning in item.Warnings)
                                            {
                                                <li>@Html.Raw(warning)</li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </td>
                            @if (Model.ShowVendorName)
                            {
                                <td class="vendor">
                                    <label class="td-title">@T("ShoppingCart.VendorName"):</label>
                                    <span class="vendor-name">@item.VendorName</span>
                                </td>
                            }
                            <td class="unit-price">
                                <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                <span class="product-unit-price">@item.UnitPrice</span>
                            </td>
                            <td class="quantity">
                                <label class="td-title" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                                @if (Model.IsEditable)
                                {


                                    <div class="input-group">
                                        @*<input type="button" value="-" class="button-minus" data-field="itemquantity@(item.Id)">*@
                                        <span class="minus add-crt-hide-part" data-field="itemquantity@(item.Id)">-</span>
                                        <input style="background-color:white"  name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" aria-label="@T("ShoppingCart.Quantity")" />
                                        <span class="plus add-crt-hide-part" data-field="itemquantity@(item.Id)">+</span>
                                        @*<input type="button" value="+" class="button-plus" data-field="itemquantity@(item.Id)">*@
                                    </div>







                                }
                                else
                                {
                                    <span class="product-quantity">@item.Quantity</span>
                                }
                            </td>

                            @if (Model.IsEditable)
                            {
                                <td class="remove-from-cart">
                                    @if (item.DisableRemoval)
                                    {
                                        <text>&nbsp;</text>
                                    }
                                    else

                                    {
                                        <input type="checkbox" name="removefromcart" value="@(item.Id)" style="display:none;" />
                                        <button type="button" style="width: 50px;height: 50px;background-color: transparent;border: 1px solid #c2c2c2;">
                                            <i class="fi-delete" style="font-size:20px;color:red;"></i>
                                        </button>
                                        @*<label class="td-title" for="removefromcart@(item.Id)">@T("ShoppingCart.Remove"):</label>
                    <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />*@
                                    }
                                </td>
                            }
                            <td class="subtotal">
                                <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                <span class="product-subtotal">@item.SubTotal</span>
                                @if (!string.IsNullOrEmpty(item.Discount))
                                {
                                    <div class="discount">
                                        @T("ShoppingCart.ItemYouSave", item.Discount)
                                    </div>
                                    if (item.MaximumDiscountedQty.HasValue)
                                    {
                                        <div class="discount-additional-info">
                                            @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                        </div>
                                    }
                                }
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (Model.CheckoutAttributes.Count > 0)
            {
                @await Component.InvokeAsync("SelectedCheckoutAttributes")
            }
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="cart-options">
                @if (Model.IsEditable)
                {
                <div class="common-buttons">
                    <input type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" style="display:none" />
                    @*<input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />*@
                    <a href="@home" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" style="background: #009ddc; color: #fff !important; ">@T("ShoppingCart.ContinueShopping")</a>
                    @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                </div>
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
            </div>
            <div class="cart-footer">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                @if (Model.IsEditable)
                {
                    if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                    {
                        <div class="min-amount-warning">
                            @Model.MinOrderSubtotalWarning
                        </div>
                    }
                }
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals">
                        <div class="deals">
                            @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                            @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                        </div>
                    </div>
                }
                <div class="totals">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })

                        @if (Model.IsEditable)
                        {
                            if (Model.TermsOfServiceOnShoppingCartPage)
                            {
                                <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display:none;">
                                    <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                </div>
                                <div class="terms-of-service">
                                    <input id="termsofservice" type="checkbox" name="termsofservice" />
                                    <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                    @if (Model.TermsOfServicePopup)
                                    {
                                        <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                        <script asp-location="Footer">
                                        $(document).ready(function () {




                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                        '@T("Checkout.TermsOfService")');
                                                    $(".ui-dialog").css({ "top": "40%" });

                                                    setTimeout(
                                                        function () {
                                                            //do something special
                                                            //$("#ui-id-1").css({ "overflow-y": "auto" });
                                                            $(".ui-dialog-content").css({ "overflow-y": "auto" });
                                                            $(".ui-dialog").css({ "top": "40%" });
                                                            var topic = $("#ph-topic").find('p');
                                                            if (isArabic(topic[0].innerText))
                                                                $("#ph-topic").css({ "text-align": "right" });
                                                            else
                                                                $("#ph-topic").css({ "text-align": "left" });
                                                        }, 1000);
                                                });
                                        });
                                        function isArabic(strInput) {
                                            var arregex = /[\u0600-\u06FF]/;
                                            if (arregex.test(strInput)) {
                                                return true;
                                            } else {
                                                return false;
                                            }
                                        }
                                        </script>
                                    }
                                    else
                                    {
                                        <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                    }
                                </div>
                            }
                            <div class="checkout-buttons">
                                @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                {
                                    <script asp-location="Footer">
                                        $(document).ready(function () {
                                            $('#checkout').on('click', function () {
                                                //terms of service
                                                var termOfServiceOk = true;
                                                if ($('#termsofservice').length > 0) {
                                                    //terms of service element exists
                                                    if (!$('#termsofservice').is(':checked')) {
                                                        $("#terms-of-service-warning-box").dialog();
                                                        termOfServiceOk = false;
                                                    } else {
                                                        termOfServiceOk = true;
                                                    }
                                                }
                                                return termOfServiceOk;
                                            });
                                        });
                                    </script>
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                        <span>@T("Checkout.Button")</span>
                                    </button>
                                }
                            </div>
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    </div>
                </div>
                @if (Model.IsEditable)
                {
                    @await Component.InvokeAsync("CrossSellProducts")
                }
            </form>
        }
        else
        {
            <div class="no-data">
                @T("ShoppingCart.CartIsEmpty")
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
    </div>

    <script>

    $(function () {
        $('.qty-input').keypress(function (e) {

            var charCode = (e.which) ? e.which : event.keyCode

            if (String.fromCharCode(charCode).match(/[^0-9]/g))

                return false;

        });

        $('.cart tbody tr').on('click', 'td.remove-from-cart', function (e) {
            e.preventDefault();

            var $this = $(this);
            var checkbox = $this.find('input[type=checkbox]');
            checkbox.prop('checked', true);

            var reply = confirm('@T("common.areyousure")');
            if (reply) {
                $('.cart-options .update-cart-button').click();
            }
        });

        $(".qty-dropdown").change(function () {
            $('.cart-options .update-cart-button').click();
        });

        $(".qty-input").change(function () {
 
            $('.cart-options .update-cart-button').click();
        });
    });
    function incrementValue(e) {
        e.preventDefault();
        var fieldName = $(e.target).data('field');
        var parent = $(e.target).closest('div');
        var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

        if (!isNaN(currentVal)) {
            parent.find('input[name=' + fieldName + ']').val(currentVal + 1);
        } else {
            parent.find('input[name=' + fieldName + ']').val(0);
        }
    }

    function decrementValue(e) {
        e.preventDefault();
        var fieldName = $(e.target).data('field');
        var parent = $(e.target).closest('div');
        var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

        if (!isNaN(currentVal) && currentVal > 0) {
            parent.find('input[name=' + fieldName + ']').val(currentVal - 1);
        } else {
            parent.find('input[name=' + fieldName + ']').val(0);
        }
    }

    $('.input-group').on('click', '.plus', function (e) {
        incrementValue(e);
        $(".qty-input").trigger("change");
    });

    $('.input-group').on('click', '.minus', function (e) {
        decrementValue(e);
        $(".qty-input").trigger("change");
    });

</script>
