@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_Root.Head";

    var currentStoreId = storeContext.CurrentStore.Id;
    var isHeaderInsideHomePageMainSlider = settingService.GetSettingByKey("urbanthemesettings.isheaderinsidehomepagemainslider", false, currentStoreId, true);
    var homePageMainSlider = await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" });

    var currentControllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var isHomePage = currentControllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);
}
@await Component.InvokeAsync("Widget", new { widgetZone = "body_start_html_tag_after" })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page @{if (isHeaderInsideHomePageMainSlider){<text>header-inside-slider</text>} if (isHomePage){<text> home-page </text>} }">
    @*@await Component.InvokeAsync("AdminHeaderLinks")*@
    @await Html.PartialAsync("_Header")

    @if (isHomePage && !String.IsNullOrEmpty(homePageMainSlider.ToHtmlString()))
    {
        <div class="home_page_main_slider center-side-wrapper">
            @homePageMainSlider
        </div>
    }

    <div class="master-wrapper-content">
    	<script type="text/javascript" asp-location="Footer">
			var localized_data = {
	            AjaxCartFailure: "@T("AjaxCart.Failure")"
	        };
     /*       AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart', localized_data);*/
            AjaxCart.init(false, '.header-buttons .cart-qty', '.header-buttons .wishlist-qty', '#flyout-cart', localized_data);
        </script>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
        @*ajax loading window*@
        <div class="ajax-loading-block-window" style="display: none">
            <div class="loading-image">
            </div>
        </div>
        <div class="master-wrapper-main">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    <div class="overlayOffCanvas"></div>
</div>

@await Component.InvokeAsync("Footer")
@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
