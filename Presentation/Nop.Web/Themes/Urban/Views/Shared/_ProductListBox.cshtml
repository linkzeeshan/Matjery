@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@using Nop.Services.Orders;
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IStoreContext storeContext
@inject ISettingService settingService
@inject IShoppingCartService shoppingCartService
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var currentStore = storeContext.CurrentStore;
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });

    var currentStoreId = storeContext.CurrentStore.Id;

    var hoverEffectClass = settingService.GetSettingByKey("urbanthemesettings.ItemBoxHoverEffect", "hover-1", currentStoreId, true).ToLowerInvariant();
    // var currentProductInWishList = workContext.CurrentCustomer.ShoppingCartItems
    //.Where(sci => sci.ShoppingCartType == ShoppingCartType.Wishlist && Model.Id == sci.ProductId)
    //.LimitPerStore(storeContext.CurrentStore.Id)
    //.FirstOrDefault();
    var shoppingCartItems = shoppingCartService.GetShoppingCart(workContext.CurrentCustomer, ShoppingCartType.Wishlist, storeContext.CurrentStore.Id);
    var currentProductInWishList = shoppingCartItems
         .Where(sci => Model.Id == sci.ProductId)
         .LimitPerStore(storeContext.CurrentStore.Id)
         .FirstOrDefault();

    Model.ProductPrice.IsAddedToWishlist = currentProductInWishList != null ? true : false;

}
<div class="product-item @hoverEffectClass" data-productid="@Model.Id">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="details">
        <h2 class="product-title">
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
        </h2>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        <div class="add-info">
            <div class="prices">
                @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                {
                    <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                }
                <span class="price actual-price">@Model.ProductPrice.Price</span>
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <div class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }
            </div>
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                var ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>
            }
            <div class="description">
                @Html.Raw(Model.ShortDescription)
            </div>
        </div>
        <div class="buttons">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="buttons-inner-wrapper">

                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    @*<div class="add-to-wishlist">
                <input type="button" class="button-2 add-to-wishlist-button@(Model.ProductPrice.IsAddedToWishlist ? " added" : "")" value="@T("ShoppingCart.AddToWishlist")" data-productid="@Model.Id" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink     ');return false;" />
            </div>
            <input type="button" value="@(addToCartText)" title="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink',this,true);return false;" />*@
                <div class="add-to-wishlist">
                    <input type="button" class="button-2 add-to-wishlist-button@(Model.ProductPrice.IsAddedToWishlist ? " added" : "")" value="@T("ShoppingCart.AddToWishlist")" data-productid="@Model.Id" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink', this);return false;" />
                </div>
                }

                @if (catalogSettings.CompareProductsEnabled)
                {
                    <div class="compare-products">
                        <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                    </div>
                }

                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }

                    @*<input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink    ',this);return false;" />*@
                    <input type="button" value="@(addToCartText)" title="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink',this,true);return false;" />

                }

            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
